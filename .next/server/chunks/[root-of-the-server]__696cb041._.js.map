{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 66, "column": 0}, "map": {"version":3,"sources":["file:///Users/apilaashyoharan/Documents/Waterloo-Guesser/app/api/getPhoto/route.ts"],"sourcesContent":["import { NextRequest } from 'next/server';\nimport { MongoClient, ObjectId } from 'mongodb';\n\nconst uri = process.env.MONGODB_URI || '';\nconst dbName = process.env.MONGODB_DB || '';\nif (!uri || !dbName) {\n  console.error('Missing MongoDB env variables:', { uri, dbName });\n}\n\nexport async function POST(req: NextRequest) {\n  try {\n    const client = new MongoClient(uri || '');\n    await client.connect();\n    const db = client.db(dbName || '');\n    const collection = db.collection('base_locations');\n\n    // Optionally, filter out previously used images\n    let previousCodes: string[] = [];\n    try {\n      const body = await req.json();\n      previousCodes = body.previousCodes || [];\n    } catch {}\n\n    // Convert previousCodes to ObjectId\n    let query = {};\n    if (previousCodes.length > 0) {\n      const objectIds = previousCodes\n        .filter((id) => ObjectId.isValid(id))\n        .map((id) => new ObjectId(id));\n      query = { _id: { $nin: objectIds } };\n    }\n    const count = await collection.countDocuments(query);\n    if (count === 0) {\n      await client.close();\n      return new Response(JSON.stringify({ error: 'No images available' }), { status: 404 });\n    }\n    const randomSkip = Math.floor(Math.random() * count);\n    const doc = await collection.find(query).skip(randomSkip).limit(1).next();\n    await client.close();\n    if (!doc) {\n      return new Response(JSON.stringify({ error: 'No image found' }), { status: 404 });\n    }\n    // Return image as base64 string and metadata\n    return new Response(JSON.stringify({\n      image: doc.image ? `data:image/png;base64,${doc.image}` : null,\n      id: doc._id,\n      building: doc.building,\n      xCoordinate: doc.xCoordinate,\n      yCoordinate: doc.yCoordinate,\n      name: doc.name,\n      latitude: doc.latitude,\n      longitude: doc.longitude\n    }), { status: 200 });\n  } catch (err) {\n    return new Response(JSON.stringify({ error: 'Server error', details: String(err) }), { status: 500 });\n  }\n}\n"],"names":[],"mappings":";;;AACA;;AAEA,MAAM,MAAM,QAAQ,GAAG,CAAC,WAAW,IAAI;AACvC,MAAM,SAAS,QAAQ,GAAG,CAAC,UAAU,IAAI;AACzC,IAAI,CAAC,OAAO,CAAC,QAAQ;IACnB,QAAQ,KAAK,CAAC,kCAAkC;QAAE;QAAK;IAAO;AAChE;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,SAAS,IAAI,uGAAA,CAAA,cAAW,CAAC,OAAO;QACtC,MAAM,OAAO,OAAO;QACpB,MAAM,KAAK,OAAO,EAAE,CAAC,UAAU;QAC/B,MAAM,aAAa,GAAG,UAAU,CAAC;QAEjC,gDAAgD;QAChD,IAAI,gBAA0B,EAAE;QAChC,IAAI;YACF,MAAM,OAAO,MAAM,IAAI,IAAI;YAC3B,gBAAgB,KAAK,aAAa,IAAI,EAAE;QAC1C,EAAE,OAAM,CAAC;QAET,oCAAoC;QACpC,IAAI,QAAQ,CAAC;QACb,IAAI,cAAc,MAAM,GAAG,GAAG;YAC5B,MAAM,YAAY,cACf,MAAM,CAAC,CAAC,KAAO,uGAAA,CAAA,WAAQ,CAAC,OAAO,CAAC,KAChC,GAAG,CAAC,CAAC,KAAO,IAAI,uGAAA,CAAA,WAAQ,CAAC;YAC5B,QAAQ;gBAAE,KAAK;oBAAE,MAAM;gBAAU;YAAE;QACrC;QACA,MAAM,QAAQ,MAAM,WAAW,cAAc,CAAC;QAC9C,IAAI,UAAU,GAAG;YACf,MAAM,OAAO,KAAK;YAClB,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAsB,IAAI;gBAAE,QAAQ;YAAI;QACtF;QACA,MAAM,aAAa,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK;QAC9C,MAAM,MAAM,MAAM,WAAW,IAAI,CAAC,OAAO,IAAI,CAAC,YAAY,KAAK,CAAC,GAAG,IAAI;QACvE,MAAM,OAAO,KAAK;QAClB,IAAI,CAAC,KAAK;YACR,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;gBAAE,OAAO;YAAiB,IAAI;gBAAE,QAAQ;YAAI;QACjF;QACA,6CAA6C;QAC7C,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YACjC,OAAO,IAAI,KAAK,GAAG,CAAC,sBAAsB,EAAE,IAAI,KAAK,EAAE,GAAG;YAC1D,IAAI,IAAI,GAAG;YACX,UAAU,IAAI,QAAQ;YACtB,aAAa,IAAI,WAAW;YAC5B,aAAa,IAAI,WAAW;YAC5B,MAAM,IAAI,IAAI;YACd,UAAU,IAAI,QAAQ;YACtB,WAAW,IAAI,SAAS;QAC1B,IAAI;YAAE,QAAQ;QAAI;IACpB,EAAE,OAAO,KAAK;QACZ,OAAO,IAAI,SAAS,KAAK,SAAS,CAAC;YAAE,OAAO;YAAgB,SAAS,OAAO;QAAK,IAAI;YAAE,QAAQ;QAAI;IACrG;AACF","debugId":null}}]
}